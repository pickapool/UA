@page "/students"

@inject IStudentService StudentService
@inject IDialogService dialogService
@inject ISnackbar Snackbar
@inject ICourseService courseService
@inject IDepartmentService departmentService
@inject ISectionService sectionService
@inject ISanctionService sanctionService
@inject IUserSanctionService UserSanctionService
@inject IJSRuntime JSRuntime

<div class="settings pa-2 table-fix-header">
    <MudTable class="data-grid" Items="@list" Hover="true" Breakpoint="Breakpoint.Xs"
        FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true' RowsPerPage='15'
        Filter='new Func<StudentModel,bool>(FilterItems)' Loading="IsLoading" Elevation="3">
        <ToolBarContent>
            <div class="d-flex flex-column">
                <MudText Typo='Typo.caption'>
                @list.Count()
                @(list.Count() == 1 ? "item" : "items")
                in Total
                </MudText>
                <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Student Name'
                        Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
                        Clearable='true' Variant='Variant.Text' Immediate="true" Margin="Margin.Dense"/>
            </div>
            <MudSpacer />
            <MudTooltip Text="Refresh Table">
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick='() => GetList(new FilterParameter())' />
            </MudTooltip>
            <MudMenu StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft'
                TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
                <MudMenuItem OnClick="()=> EditStudent(new())">
                    <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' />
                        <MudText Typo='Typo.body2'>Add</MudText>
                    </div>
                </MudMenuItem>
                <MudMenuItem OnClick="OpenExport">
                    <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.ImportExport' Size='Size.Small' />
                        <MudText Typo='Typo.body2'>Import</MudText>
                    </div>
                </MudMenuItem>
                <MudMenuItem OnClick="Toggle">
                    <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' />
                        <MudText Typo='Typo.body2'>Filter</MudText>
                    </div>
                </MudMenuItem>
            </MudMenu>
            <MudPopover Open="@_isOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Fixed="true" Class="px-4 pt-4 width400px">
                <MudGrid Spacing="1">
                    <MudItem Class="d-flex" xs="12">
                        <MudIcon Class="mr-2" Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' />
                        <MudText Typo="Typo.button">FILTER</MudText>
                    </MudItem>
                    <MudItem Class="mb-2" xs="12">
                        <MudDivider/>
                    </MudItem>
                    <MudItem xs=2><MudCheckBox @bind-Checked="parameter.IsDate"></MudCheckBox></MudItem>
                    <MudItem xs=10><MudDateRangePicker Label="Sanction Date" @bind-DateRange="_dateRange" 
                        IconSize='Size.Small' DisableToolbar AnchorOrigin='Origin.BottomLeft' TransformOrigin='Origin.BottomRight'
                        Placeholder="Sanction Date" Variant='Variant.Outlined' Margin='Margin.Dense' Disabled="!parameter.IsDate"/></MudItem>
                        <MudItem xs=2><MudCheckBox @bind-Checked="parameter.IsDepartment"></MudCheckBox></MudItem>
                    <MudItem xs=10>
                        <MudSelect Class='w300px' MultiSelectionTextFunc='@(new Func<List<string>, string>(SelectedDepartment))' @bind-SelectedValues=hasDepartment Label='College' 
                            @bind-Value='selectedDepartment'  Clearable  
                            IconSize='Size.Small' Dense MultiSelection Disabled='!parameter.IsDepartment' Placeholder='College' Variant='Variant.Outlined'
                            AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter'>
                            @foreach (var item in departmentList)
                            {
                                <MudSelectItem  Value="@item">@item.DepartmentName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs=2><MudCheckBox @bind-Checked="parameter.IsCourse"></MudCheckBox></MudItem>
                    <MudItem xs=10>
                        <MudSelect Class='w300px' MultiSelectionTextFunc='@(new Func<List<string>, string>(SelectedCourse))' @bind-SelectedValues=hasCourse Label='Program' 
                            @bind-Value='selectedCourse'  Clearable  
                            IconSize='Size.Small' Dense MultiSelection Disabled='!parameter.IsCourse' Placeholder='Program' Variant='Variant.Outlined'
                            AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter'>
                            @foreach (var item in courseList)
                            {
                                <MudSelectItem  Value="@item">@item.CourseName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs=2><MudCheckBox @bind-Checked="parameter.IsSection"></MudCheckBox></MudItem>
                    <MudItem xs=10>
                        <MudSelect Class='w300px' MultiSelectionTextFunc='@(new Func<List<string>, string>(SelectedSection))' @bind-SelectedValues=hasSection Label='Section' 
                            @bind-Value='selectedSection'  Clearable  
                            IconSize='Size.Small' Dense MultiSelection Disabled='!parameter.IsSection' Placeholder='Section' Variant='Variant.Outlined'
                            AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter'>
                            @foreach (var item in sectionList)
                            {
                                <MudSelectItem  Value="@item">@item.SectionName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs=2><MudCheckBox @bind-Checked="parameter.IsYear"></MudCheckBox></MudItem>
                    <MudItem xs=10>
                        <MudSelect Class='w300px' MultiSelectionTextFunc='@(new Func<List<string>, string>(SelectedYear))' @bind-SelectedValues=hasYear Label='Year Level' 
                            @bind-Value='selectedYear'  Clearable  
                            IconSize='Size.Small' Dense MultiSelection Disabled='!parameter.IsYear' Placeholder='Year Level' Variant='Variant.Outlined'
                            AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter'>
                            @foreach (Enums.YearLevel item in Enum.GetValues(typeof(Enums.YearLevel)))
                            {
                                <MudSelectItem Value="@item">@Extensions.GetEnumDescription(item)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs=2><MudCheckBox @bind-Checked="parameter.IsSanction"></MudCheckBox></MudItem>
                    <MudItem xs=10>
                        <MudSelect Class='w300px' MultiSelectionTextFunc='@(new Func<List<string>, string>(SelectedSanction))' @bind-SelectedValues=hasSanction Label='Sanction' 
                            @bind-Value='selectedSanction'  Clearable  
                            IconSize='Size.Small' Dense MultiSelection Disabled='!parameter.IsSanction' Placeholder='Sanction' Variant='Variant.Outlined'
                            AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter'>
                            @foreach (var item in sanctionList)
                            {
                                <MudSelectItem  Value="@item">@item.SanctionName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="7"></MudItem>
                    <MudItem xs="5">
                        <MudButton OnClick="@Toggle" Class="ml-auto mr-1 mb-3" Color="Color.Default">Close</MudButton>
                        <MudButton OnClick="@Filter" Class="ml-auto mr-n3 mb-3" Variant="Variant.Filled" Color="Color.Info">Filter</MudButton> 
                    </MudItem>
                </MudGrid>
            </MudPopover>
        </ToolBarContent>
        <ColGroup>
            <col style='width: 120px' />
            <col />
            <col />
            <col />
            <col style='width: 60px' />
            <col style='width: 30px' />
            <col style="width: 20px;"/>
            <col style='width: 120px' />
            <col style='width: 20px' />
        </ColGroup>
        <HeaderContent>
            <MudTh Class='customheader-1'>
                <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                    SortBy="new Func<StudentModel, object>(x=>x.StudentId)">
                    Id No.
                </MudTableSortLabel>
            </MudTh>
            <MudTh Class='customheader-1'>
                <MudTableSortLabel InitialDirection="SortDirection.None"
                     SortBy="new Func<StudentModel, object>(x=>x.QRCode)">
                    QR Code
                </MudTableSortLabel>
            </MudTh>
            <MudTh Class='customheader-1'>
                <MudTableSortLabel InitialDirection="SortDirection.None"
                    SortBy="new Func<StudentModel, object>(x=>x.StudentName)">
                    Name
                </MudTableSortLabel>
            </MudTh>
            <MudTh Class='customheader-1'>
                <MudTableSortLabel InitialDirection="SortDirection.None"
                    SortBy="new Func<StudentModel, object>(x=>x.Course.CourseName)">
                    Course
                </MudTableSortLabel>
            </MudTh>
            <MudTh Class='customheader-1'>
                <MudTableSortLabel InitialDirection="SortDirection.None"
                    SortBy="new Func<StudentModel, object>(x=>x.Department.DepartmentName)">
                    Department
                </MudTableSortLabel>
            </MudTh>
            <MudTh Class='customheader-1'>
                <MudTableSortLabel InitialDirection="SortDirection.None"
                    SortBy="new Func<StudentModel, object>(x=>x.Section.SectionName)">
                    Section
                </MudTableSortLabel>
            </MudTh>
            <MudTh Class='customheader-1'>
                Sanctions
            </MudTh>
            <MudTh Class='customheader-1'>
                Year Level
            </MudTh>
            <MudTh Class='customheader-1 text-center pa-2'>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Student Name">@context.IdNo</MudTd>
            <MudTd DataLabel="QR Code">@context.QRCode</MudTd>
            <MudTd DataLabel="Course Name">@context.StudentName</MudTd>
            <MudTd DataLabel="Course Name">@context.Course.CourseName</MudTd>
            <MudTd DataLabel="Department Name">@context.Department.DepartmentName</MudTd>
            <MudTd DataLabel="Section Name" Class="text-center">@context.Section.SectionName</MudTd>
            <MudTd DataLabel="Sanctions" Class="text-center">
                <MudToggleIconButton Toggled='context.IsOpenSanctions'
                    ToggledChanged="((bool b) =>
                    { 
                        context.IsOpenSanctions = !context.IsOpenSanctions;
                        GetSanctions(b, context); 
                    })"
                    Icon="@Icons.Material.Filled.KeyboardArrowDown" Color="Color.Default" Title="Expand" Size='Size.Small' ToggledSize='Size.Small'
                    ToggledIcon="@Icons.Material.Filled.KeyboardArrowUp" ToggledColor="@Color.Info" ToggledTitle="Collapse"/>
            </MudTd>
            <MudTd DataLabel="Year Level">@Extensions.GetEnumDescription((Enums.YearLevel) context.YearLevel)</MudTd>
            <MudTd Class='text-center pa-2'>
                <MudMenu Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft'
                    TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small'>
                    <MudMenuItem OnClick="()=> EditStudent(context)">
                        <div class='d-flex align-center gap-2 '>
                            <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' />
                            <MudText Typo='Typo.body2'>Edit</MudText>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="()=> DeleteStudent(context.StudentId)">
                        <div class='d-flex align-center gap-2 '>
                            <MudIcon Icon='@Icons.Material.Filled.Delete' Size='Size.Small' />
                            <MudText Typo='Typo.body2'>Remove</MudText>
                        </div>
                    </MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <span>No Records found</span>
        </NoRecordsContent>
        <ChildRowContent>
            @if(context.IsOpenSanctions)
            {
                <MudTr>
                  <td colspan="9" style="background: #bbdfff;">
                    <div class="pa-2 table-fix-header2 mb-4 d-flex justify-content-center align-center">
                    @if(context.IsTableLoading)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                    } else {
                         <MudTable class="data-grid overflow-hidden" style="height: unset !important; width: 100%;"  Items="@context.Sanctions" Context="uSanc" Hover="true" Breakpoint="Breakpoint.Xs"
                        FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true' RowsPerPage='15' Elevation="3" Loading="context.IsTableLoading">
                        <ColGroup>
                            <col style="width: 120px;"/>
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col style='width: 20px' />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh Class='customheader-1 text-center pa-2' style="z-index: 1 !important;">Image</MudTh>
                            <MudTh Class='customheader-1' style="z-index: 1 !important;">
                                <MudTableSortLabel InitialDirection="SortDirection.None"
                                    SortBy="new Func<UserSanctionModel, object>(x=>x.Sanction.SanctionName)">
                                    Sanction
                                </MudTableSortLabel>
                            </MudTh>
                            <MudTh Class='customheader-1'style="z-index: 1 !important;">
                                <MudTableSortLabel InitialDirection="SortDirection.None"
                                    SortBy="new Func<UserSanctionModel, object>(x=>x.DateRecorded)">
                                    Date
                                </MudTableSortLabel>
                            </MudTh>
                            <MudTh Class='customheader-1 text-center pa-2' style="z-index: 1 !important;">Amount</MudTh>
                            <MudTh Class='customheader-1 text-center pa-2'>Officer</MudTh>
                            <MudTh Class='customheader-1 text-center pa-2'>Mark as Paid</MudTh>
                            <MudTh Class='customheader-1 text-center pa-2' style="z-index: 1 !important;">Status</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                             <MudTd Class="d-flex justify-content-center align-items-center" DataLabel="Sanction Name">
                                <a href='@($"data:image/png;base64, {Convert.ToBase64String(uSanc.SanctionImage)}")' target="_blank" rel="noopener noreferrer" download="file.jpg">
                                    <MudImage Src='@($"data:image/png;base64, {Convert.ToBase64String(uSanc.SanctionImage)}")'
                                        ObjectFit="ObjectFit.Fill"
                                        Width="100" Height="100"
                                     Alt="Image" Elevation="25" Class="rounded-lg"></MudImage>
                                </a>
                            </MudTd>
                            <MudTd DataLabel="Sanction Name">@uSanc.Sanction.SanctionName</MudTd>
                            <MudTd DataLabel="Date">@uSanc.DateRecorded.ToString("MM/dd/yyyy")</MudTd>
                            <MudTd Class="text-end" DataLabel="Sanction Name">@uSanc.Sanction.Amount.ToString("N2")</MudTd>
                            <MudTd DataLabel="Office Name">@uSanc.Account.Username</MudTd>
                            <MudTd DataLabel="Office Name">@(uSanc.MarkAsPaidById == null || !uSanc.IsPaid? "" :uSanc.MarkAsPaidByAccount.Username)</MudTd>
                            @if(uSanc.IsPaid)
                            {
                                <MudTd DataLabel="Paid" Class="text-center">
                                    <MudChip Size="Size.Small" Variant="Variant.Filled" Color="Color.Info">Paid</MudChip>
                                </MudTd>
                            } else {
                                <MudTd DataLabel="Paid" Class="text-center">
                                    <MudChip Size="Size.Small" Variant="Variant.Filled" Color="Color.Error">Not Paid</MudChip>
                                </MudTd>
                            }
                        </RowTemplate>
                        <NoRecordsContent>
                            <span>No Records found</span>
                        </NoRecordsContent>
                    </MudTable>
                    }
                   
                    </div>
                  </td>
                </MudTr>
            }
        </ChildRowContent>
        <PagerContent>
            <MudTablePager PageSizeOptions='@pageSize' />
        </PagerContent>
    </MudTable>
</div>

@code {
    List<StudentModel> list = new();
    private int[] pageSize = new int[] {30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty;
    private bool IsLoading = true;
    public bool _isOpen;
    FilterParameter parameter = new();
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private IEnumerable<CourseModel> hasCourse {get; set;} = new HashSet<CourseModel>();
    private CourseModel selectedCourse = new();
    private List<CourseModel> courseList = new();
    private IEnumerable<DepartmentModel> hasDepartment {get; set;} = new HashSet<DepartmentModel>();
    private DepartmentModel selectedDepartment = new();
    private List<DepartmentModel> departmentList = new();
    private IEnumerable<SectionModel> hasSection {get; set;} = new HashSet<SectionModel>();
    private SectionModel selectedSection = new();
    private List<SectionModel> sectionList = new();
    private IEnumerable<Enums.YearLevel> hasYear {get; set;} = new HashSet<Enums.YearLevel>();
    private Enums.YearLevel selectedYear = new();
    private IEnumerable<SanctionModel> hasSanction {get; set;} = new HashSet<SanctionModel>();
    private SanctionModel selectedSanction = new();
    private List<SanctionModel> sanctionList = new();

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Students";
        await GetList(new FilterParameter());
        await Courses();
        await Departments();
        await Sections();
        await Sanctions();
    }
    private async Task GetList(FilterParameter param)
    {
        IsLoading = true;
        Task<List<StudentModel>> data = StudentService.ListOfStudent(param);
        await data;
        if (data.Status == TaskStatus.RanToCompletion)
        {
            list = data.Result;
            await Task.Delay(1000);
            IsLoading = false;
            StateHasChanged();
        }
    }
    private bool FilterItems(StudentModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.StudentName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }
    private async Task EditStudent(StudentModel dept)
    {
        var parameters = new DialogParameters();
        parameters.Add("color", dept.StudentId == 0 ? Color.Info : Color.Success);
        parameters.Add("dialogTitle", dept.StudentId == 0 ? "Add Student" : "Edit Student");
        parameters.Add("buttonText", dept.StudentId == 0 ? "Add" : "Save");
        parameters.Add("StudentModel", dept);
        MaxWidth width = MaxWidth.ExtraSmall;
        if(dept.StudentId != 0)
            width = MaxWidth.Large;
        var options = new DialogOptions() { CloseButton = false, MaxWidth = width, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Dialogs.StudentDialog>("", parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            await GetList(new FilterParameter());
        } else {
            await GetList(new FilterParameter());
        }
    }
    private async Task DeleteStudent(int id)
    {
        var parameters = new DialogParameters<Confirmation>();
        parameters.Add("ContentText", "Do you really want to delete these record? This process cannot be undone.");
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await dialogService.Show<Confirmation>("Delete", parameters, options).Result;
        if(!dialog.Canceled)
        {
            IsLoading = !IsLoading;
            Task t = StudentService.DeleteStudent(id);
            await t;
            if(t.Status == TaskStatus.RanToCompletion)
            {
                await GetList(new FilterParameter());
                Extensions.ShowAlert("Student successfully remove.", Variant.Filled, Snackbar, Severity.Success);
            }
        }
    }
    public void Toggle()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
    public async Task Filter()
    {
        if(parameter.IsDate)
        {
            parameter.DateFrom = Convert.ToDateTime(_dateRange.Start);
            parameter.DateTo = Convert.ToDateTime(_dateRange.End);
        }
        if(parameter.IsCourse)
        {
            parameter.Courses = hasCourse.ToList();
        }
        if(parameter.IsDepartment)
        {
            parameter.Departments = hasDepartment.ToList();
        }
        if(parameter.IsSection)
        {
            parameter.Sections = hasSection.ToList();
        }
        if(parameter.IsYear)
        {
            parameter.YearLevels = hasYear.ToList();
        }
        if(parameter.IsSanction)
        {
            parameter.Sanctions = hasSanction.ToList();
        }
       await GetList(parameter);
    }
    private async Task Courses()
    {
        courseList = await courseService.ListOfCourse(new FilterParameter());
    }
    private async Task Departments()
    {
        departmentList = await departmentService.ListOfDepartment(new FilterParameter());
    }
    private async Task Sections()
    {
        sectionList = await sectionService.ListOfSection(new FilterParameter());
    }
    private string SelectedCourse(List<string> selectedCourse)
    {
        var course = "";
        foreach (var item in hasCourse)
        {
        course = string.Join(", ", hasCourse.Select(x => x.CourseName));      
        }
        return $"{course}";
    }
    private string SelectedSection(List<string> selectedSection)
    {
        var sec = "";
        foreach (var item in hasSection)
        {
        sec = string.Join(", ", hasSection.Select(x => x.SectionName));      
        }
        return $"{sec}";
    }
    private string SelectedDepartment(List<string> selectedDepartment)
    {
        var dept = "";
        foreach (var item in hasDepartment)
        {
        dept = string.Join(", ", hasDepartment.Select(x => x.DepartmentName));      
        }
        return $"{dept}";
    }
    private string SelectedYear(List<string> selectedYear)
    {
        var year = "";
        foreach (var item in hasYear)
        {
        year = string.Join(", ", hasYear.Select(x => x));      
        }
        return $"{year}";
    }
    private string SelectedSanction(List<string> selectedSanction)
    {
        var sanc = "";
        foreach (var item in hasSanction)
        {
            sanc = string.Join(", ", hasSanction.Select(x => x.SanctionName));      
        }
        return $"{sanc}";
    }
    private async Task Sanctions()
    {
        sanctionList = await sanctionService.ListOfSanction(new FilterParameter());
    }
    private async Task OpenImage(string base64)
    {
        // Generate the data URI for the base64 image
        string dataUri = $"data:image/png;base64,{base64}";

        // Open the image in a new tab
        await JSRuntime.InvokeVoidAsync("window.open", dataUri, "_blank");
    }
    private async Task GetSanctions(bool b, StudentModel student)
    {
        student.IsTableLoading = true;
        StateHasChanged();
        var param = new FilterParameter();
        param.StudentId = student.StudentId;
        if(b)
        {
            Task<List<UserSanctionModel>> list1 = UserSanctionService.ListOfUserSanction(param);
            await list1;
            if(list1.Status == TaskStatus.RanToCompletion)
            {
                list.Where( s=> s.StudentId == student.StudentId).FirstOrDefault().Sanctions = list1.Result;
                student.IsTableLoading = false;
                StateHasChanged();
            } 
        }
    }
    private async Task OpenExport()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Dialogs.ExportDialog>("", parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            await GetList(new FilterParameter());
        } else {
            await GetList(new FilterParameter());
        }
    }
}