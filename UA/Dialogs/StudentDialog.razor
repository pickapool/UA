@inject IStudentService StudentService
@inject ISnackbar Snackbar
@inject ICourseService courseService
@inject IDepartmentService departmentService
@inject ISectionService sectionService
@inject ISanctionService sanctionService
@inject IUserSanctionService userSanctionService
@inject IDepartmentCourseService departmentCourseService
@inject IDialogService dialogService


<EditForm Model='StudentModel' OnValidSubmit='Submit'>
    <DataAnnotationsValidator />
    <MudDialog Class='customdialog2'>
        <TitleContent>
            <div class='d-flex align-center'>
                @if (StudentModel.StudentId != 0)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" />
                }
                <MudText Class='txt-uppercase' Typo='Typo.h6'>@dialogTitle</MudText>
                </div>
            </TitleContent>
            <DialogContent>
                <MudPaper Class='pa-2' Elevation='0'>
                    <MudGrid Class='settings-dialog pa-2' Spacing='1'>
                        <MudItem xs='@xsL'>
                            <MudItem xs='11'>
                                <MudTextField Onclic @bind-Value='@StudentModel.QRCode' Label='QR Code'
                                    ErrorText="Required*" HelperText="Required*" Margin='Margin.Dense'
                                    Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.QrCode2"
                                    OnAdornmentClick="OpenQR"
                                      ReadOnly/>
                                <ValidationMessage For="()=> StudentModel.QRCode" />
                            </MudItem>
                            <MudItem xs='11'>
                                <MudTextField @bind-Value='@StudentModel.IdNo' Label='ID No.'
                                    ErrorText="Required*" HelperText="Required*" Margin='Margin.Dense' />
                                <ValidationMessage For="()=> StudentModel.IdNo" />
                            </MudItem>
                            <MudItem xs='11'>
                                <MudTextField @bind-Value='@StudentModel.FacialRecognitionId' Label='Facial Recognition'
                                    ErrorText="Required*" HelperText="Required*" Margin='Margin.Dense' />
                            </MudItem>
                            <MudItem xs='11'>
                                <MudTextField @bind-Value='@StudentModel.StudentName' Label='Student Name'
                                    ErrorText="Required*" HelperText="Required*" Margin='Margin.Dense' />
                                <ValidationMessage For="()=> StudentModel.StudentName" />
                            </MudItem>
                            <MudItem xs='11'>
                                <MudSelect 
                                    ValueChanged="(DepartmentModel m) => { DepartmentChange(m); StudentModel.Department = m; }" Value="StudentModel.Department" Margin="Margin.Dense" Text="@StudentModel.Department.DepartmentName" Label="Department" HelperText="Required*" Placeholder="Section" AdornmentIcon="@Icons.Material.Filled.OtherHouses" AdornmentColor="Color.Primary">
                                    @foreach(DepartmentModel d in departments)
                                    {
                                        <MudSelectItem Value="@d">@d.DepartmentName</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        
                            <MudItem xs='11'>
                                <MudSelect 
                                @bind-Value="StudentModel.Course" Margin="Margin.Dense" Text="@StudentModel.Course.CourseName" Label="Course" HelperText="Required*" Placeholder="Program" AdornmentIcon="@Icons.Material.Filled.MenuBook" AdornmentColor="Color.Primary">
                                @if (reload)
                                {
                                    @foreach (CourseModel c in currentCourses)
                                    {
                                        <MudSelectItem Value="@c">@c.CourseName</MudSelectItem>
                                    }
                                }
                                </MudSelect>
                            </MudItem>
                           
                            <MudItem xs='11'>
                                <MudSelect 
                                    @bind-Value="StudentModel.Section" Margin="Margin.Dense" Text="@StudentModel.Section.SectionName" Label="Section" HelperText="Required*" Placeholder="Section" AdornmentIcon="@Icons.Material.Filled.AssuredWorkload" AdornmentColor="Color.Primary">
                                    @foreach(SectionModel s in sections)
                                    {
                                        <MudSelectItem Value="@s">@s.SectionName</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                                <MudItem xs='11'>
                                <MudSelect @bind-Value="StudentModel.YearLevel" Margin="Margin.Dense" Label="Year Level" HelperText="Required*" Placeholder="Year Level" AdornmentIcon="@Icons.Material.Filled.FormatListNumbered" AdornmentColor="Color.Primary">
                                    @foreach (Enums.YearLevel item in Enum.GetValues(typeof(Enums.YearLevel)))
                                    {
                                        <MudSelectItem Value="@item">@Extensions.GetEnumDescription(item)</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                        </MudItem>
                        <MudItem xs='@xsR' Class="@hide">
                            <MudGrid>
                                <MudItem xs="3">
                                    <MudText Typo="Typo.caption">Sanction</MudText>
                                    <BlazoredTypeahead Context="sanc"  @bind-Value="@sanction" SearchMethod='LoadSanctions' DisableClear placeholder='Sanctions'
                                        Debounce="300">
                                        <SelectedTemplate>
                                         @(String.IsNullOrEmpty(sanc.SanctionName) == true ? "-" : sanc.SanctionName)
                                        </SelectedTemplate>
                                        <ResultTemplate>
                                            @sanc.SanctionName | @sanc.Amount
                                        </ResultTemplate>
                                    </BlazoredTypeahead>
                                </MudItem>
                            <MudItem xs="6" Class="d-flex justify-content-start align-center mt-4">
                                        <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFiles2" MaximumFileCount="1">
                                            <ButtonTemplate Context="cFile">
                                                <MudButton HtmlTag="label"
                                                            Variant="Variant.Filled"
                                                            Color="Color.Primary"
                                                            StartIcon="@Icons.Material.Filled.CloudUpload"
                                                            for="@cFile">
                                                    @if(files.Count > 0)
                                                    {
                                                        <span>@(files[0].Name.Length > 20 ? files[0].Name.Substring(0,17) +"...": files[0].Name)</span>
                                                    } else {
                                                        <span>Select Image</span>
                                                    }
                                                </MudButton>
                                            </ButtonTemplate>
                                        </MudFileUpload>
                                 </MudItem>
                                <MudItem xs="3" Class="d-flex justify-content-end align-items-center mt-5">
                                    <MudButton OnClick="AddSanction" Variant="Variant.Filled" Size="Size.Small" Color="Color.Success">Add Sanction</MudButton>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTable class="data-grid" Height="320px" Items="@userSanctions" Context="uSanc" Hover="true" Breakpoint="Breakpoint.Xs"
                                        FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true' RowsPerPage='15' Loading="IsLoading" Elevation="3">
                                        <ColGroup>
                                            <col />
                                            <col />
                                            <col />
                                            <col />
                                            <col />
                                            <col style='width: 20px' />
                                        </ColGroup>
                                        <ToolBarContent>
                                            Total : @userSanctions.Where( e => !e.IsPaid).Sum( e => e.Amount).ToString("N2")
                                        </ToolBarContent>
                                        <HeaderContent>
                                            <MudTh Class='customheader-1'>
                                                <MudTableSortLabel InitialDirection="SortDirection.None"
                                                    SortBy="new Func<UserSanctionModel, object>(x=>x.Sanction.SanctionName)">
                                                    Sanction
                                                </MudTableSortLabel>
                                            </MudTh>
                                            <MudTh Class='customheader-1'>
                                                <MudTableSortLabel InitialDirection="SortDirection.None"
                                                    SortBy="new Func<UserSanctionModel, object>(x=>x.DateRecorded)">
                                                    Date
                                                </MudTableSortLabel>
                                            </MudTh>
                                            <MudTh Class='customheader-1 text-center pa-2'>Amount</MudTh>
                                            <MudTh Class='customheader-1 text-center pa-2'>Status</MudTh>
                                            <MudTh Class='customheader-1 text-center pa-2'>Officer</MudTh>
                                            <MudTh Class='customheader-1 text-center pa-2'>Mark by</MudTh>
                                            <MudTh Class='customheader-1 text-center pa-2'>Action</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="Sanction Name">@uSanc.Sanction.SanctionName</MudTd>
                                            <MudTd DataLabel="Date">@uSanc.DateRecorded.ToString("MM/dd/yyyy")</MudTd>
                                            <MudTd Class="text-end" DataLabel="Sanction Name">@uSanc.Sanction.Amount.ToString("N2")</MudTd>
                                            @if(uSanc.IsPaid)
                                            {
                                                <MudTd DataLabel="Paid" Class="text-center">
                                                    <MudChip Size="Size.Small" Variant="Variant.Filled" Color="Color.Info">Paid</MudChip>
                                                </MudTd>
                                            } else {
                                                <MudTd DataLabel="Paid" Class="text-center">
                                                    <MudChip Size="Size.Small" Variant="Variant.Filled" Color="Color.Error">Not Paid</MudChip>
                                                </MudTd>
                                            }
                                            <MudTd DataLabel="Office Name">@uSanc.Account.Username</MudTd>
                                            <MudTd DataLabel="Office Name">@(uSanc.MarkAsPaidById == null || !uSanc.IsPaid? "" :uSanc.MarkAsPaidByAccount.Username)</MudTd>
                                            <MudTd Class='text-center pa-2'>
                                                <MudMenu Icon='@Icons.Material.Filled.MoreVert'
                                                    AnchorOrigin='Origin.TopLeft' TransformOrigin='Origin.TopRight'
                                                    Dense='true' Size='Size.Small'>
                                                    <MudMenuItem OnClick="()=> RemoveUserSanctions(uSanc)">
                                                        <div class='d-flex align-center gap-2 '>
                                                            <MudIcon Icon='@Icons.Material.Filled.Delete'
                                                                Size='Size.Small' />
                                                            <MudText Typo='Typo.body2'>Remove</MudText>
                                                        </div>
                                                    </MudMenuItem>
                                                    <MudMenuItem OnClick="()=> PaidSanction(uSanc)">
                                                        <div class='d-flex align-center gap-2 '>
                                                            <MudIcon Icon='@Icons.Material.Filled.Delete'
                                                                Size='Size.Small' />
                                                            <MudText Typo='Typo.body2'>@(uSanc.IsPaid ? "Mark as Unpaid" : "Mark as Paid")</MudText>
                                                        </div>
                                                    </MudMenuItem>
                                                </MudMenu>
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudItem>
                            </MudGrid>  
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </DialogContent>
            <DialogActions>
                <MudSpacer />
                <MudButton Class='btn-ios-d font12' OnClick="Cancel" Variant='Variant.Text' Size='Size.Small'
                DisableElevation>Cancel</MudButton>
            @if(IsLoading)
            {
            <MudButton Class='btn-ios-d font12' ButtonType='ButtonType.Submit' Variant='Variant.Filled' Color='@color' Size='Size.Small' Disabled=IsLoading DisableElevation>
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class='font11 ms-2'>Loading...</MudText>
            </MudButton>
            } else {
                <MudButton Class='btn-ios-d font12' ButtonType='ButtonType.Submit' Variant='Variant.Filled' Color='@color'
                    Size='Size.Small' Disabled=IsLoading DisableElevation>
                    @buttonText
                </MudButton>
            }
        </DialogActions>
    </MudDialog>
</EditForm>
@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public StudentModel StudentModel { get; set; }
    [Parameter] public Color color { get; set; }
    [Parameter] public string dialogTitle { get; set; } = string.Empty;
    [Parameter] public string buttonText { get; set; } = string.Empty;
    private bool IsLoading = true;
    private List<CourseModel> courses = new(), currentCourses = new();
    private List<DepartmentModel> departments = new();
    private List<SanctionModel> sanctions = new();
    private List<SectionModel> sections = new();
    private SanctionModel sanction = new();
    private int xsL = 12;
    private int xsR = 0;
    private string hide = "d-none";
    private List<UserSanctionModel> userSanctions = new();
    private UserSanctionModel userSanc = new();
    private int[] pageSize = new int[] {30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty;
    private bool reload = false;
    IList<IBrowserFile> files = new List<IBrowserFile>();
    protected override async Task OnInitializedAsync()
    {
        if(StudentModel.StudentId == 0)
        {
            xsL = 12;
            xsR = 0;
            hide = "d-none";
        } else {
            xsL = 4;
            xsR = 8;
            hide = "d-block";
        }
        Task t = GetList();
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            IsLoading = !IsLoading;
            StateHasChanged();
        }
    }
    void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        IsLoading = !IsLoading;
        Task t = StudentModel.StudentId == 0 ? AddStudent() : UpdateStudent();
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
        {
            await Task.Delay(1000);
            Extensions.ShowAlert("Student successfully saved.", Variant.Filled, Snackbar, Severity.Success);
            MudDialog.Close();
            IsLoading = !IsLoading;
        }
    }
    private async Task AddStudent()
    {
        MapIds();
        await StudentService.AddStudent(StudentModel);
    }
    private async Task UpdateStudent()
    {
        MapIds();
        List<UserSanctionModel> list = StudentModel.Sanctions;
        StudentModel.Sanctions = new();
        await StudentService.UpdateStudent(StudentModel);
        StudentModel.Sanctions = list;
    }
    private async Task GetList()
    {
        departments =  await departmentService.ListOfDepartment(new FilterParameter());
        courses =  await courseService.ListOfCourse(new FilterParameter());
        sanctions =  await sanctionService.ListOfSanction(new FilterParameter());
        sections =  await sectionService.ListOfSection(new FilterParameter());
        await GetUserSanctions();
        if(StudentModel.StudentId == 0)
        {
            if(courses.Count > 0)
                StudentModel.Course = courses.FirstOrDefault()?? new();
            if(departments.Count > 0)
                StudentModel.Department = departments.FirstOrDefault()?? new();
            if(sections.Count > 0)
                StudentModel.Section = sections.FirstOrDefault()?? new();
            if(StudentModel.StudentId == 0)
                StudentModel.YearLevel = Enums.YearLevel.Firstyear;
            await DepartmentChange(departments.FirstOrDefault());
        }
        StateHasChanged();
        // await Task.Delay(1500);
    }
    private async Task<IEnumerable<SanctionModel>> LoadSanctions(string sanc)
    {
        return await Task.FromResult(sanctions.Where(s => s.SanctionName.Contains(sanc, StringComparison.InvariantCultureIgnoreCase)));
    }
    private void MapIds()
    {
        StudentModel.CourseId = StudentModel.Course.CourseId;
        StudentModel.DepartmentId = StudentModel.Department.DepartmentId;
        StudentModel.SectionId = StudentModel.Section.SectionId;
    }
    private async Task AddSanction()
    {
        userSanc  = new();
        userSanc.StudentId = StudentModel.StudentId;
        userSanc.SanctionId = sanction.SanctionId;
        userSanc.Sanction.SanctionId = sanction.SanctionId;
        userSanc.Sanction.SanctionName = sanction.SanctionName;
        userSanc.Amount = sanction.Amount;
        userSanc.UserId = GlobalClass.Account.UserId;
        userSanc.MarkAsPaidById = 1;
        foreach (var file in files)
        {
            using (MemoryStream memoryStream = new MemoryStream())
            {
                //Fix upload file size
                await file.OpenReadStream(209715200).CopyToAsync(memoryStream);
                userSanc.SanctionImage = memoryStream.ToArray();
            }
        }
        Task<UserSanctionModel> task = userSanctionService.AddUserSanction(userSanc);
        await task;
        if(task.Status == TaskStatus.RanToCompletion)
        {
            Extensions.ShowAlert("Sanction successfully added.", Variant.Filled, Snackbar, Severity.Success);
            await GetUserSanctions();
        }
    }
    private async Task<List<UserSanctionModel>> GetUserSanctions()
    {

        Task<List<UserSanctionModel>> t = userSanctionService.ListOfUserSanction(
            new FilterParameter
            {
                StudentId = StudentModel.StudentId
            });
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
        {
            userSanctions = t.Result;
        }
        return new();
    }
    private async Task<UserSanctionModel> RemoveUserSanctions(UserSanctionModel uSan)
    {
        IsLoading = !IsLoading;
        if(uSan.IsPaid)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
            var resultDialog = await dialogService.Show<Dialogs.ConfirmAdmin>("", parameters, options).Result;
            if(!resultDialog.Cancelled)
            {
                Task<UserSanctionModel> t = userSanctionService.DeleteUserSanction(uSan.UserSanctionId);
                await t;
                if(t.Status == TaskStatus.RanToCompletion)
                {
                    Extensions.ShowAlert("Sanction successfully removed.", Variant.Filled, Snackbar, Severity.Success);
                    await GetUserSanctions();
                }
                IsLoading = !IsLoading;
                return new();
            }
        } else {
             Task<UserSanctionModel> t1 = userSanctionService.DeleteUserSanction(uSan.UserSanctionId);
            await t1;
            if(t1.Status == TaskStatus.RanToCompletion)
            {
                Extensions.ShowAlert("Sanction successfully removed.", Variant.Filled, Snackbar, Severity.Success);
                await GetUserSanctions();
            }
            IsLoading = !IsLoading;
            return new();
        } 
        return new();
    }
    private async Task<UserSanctionModel> PaidSanction(UserSanctionModel uSan)
    {
        IsLoading = !IsLoading;
        if(uSan.IsPaid)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
            var resultDialog = await dialogService.Show<Dialogs.ConfirmAdmin>("", parameters, options).Result;
            if(!resultDialog.Cancelled)
            {
                uSan.IsPaid = !uSan.IsPaid;
                uSan.MarkAsPaidById = GlobalClass.Account.UserId;
                //Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(uSan, Newtonsoft.Json.Formatting.Indented));
                Task<UserSanctionModel> t = userSanctionService.UpdateUserSanction(uSan);
                await t;
                if(t.Status == TaskStatus.RanToCompletion)
                {
                    Extensions.ShowAlert("Sanction successfully update.", Variant.Filled, Snackbar, Severity.Success);
                    await GetUserSanctions();
                }
                IsLoading = !IsLoading;
                return new();
            }
        } else {
            uSan.IsPaid = !uSan.IsPaid;
            uSan.MarkAsPaidById = GlobalClass.Account.UserId;
            //Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(uSan, Newtonsoft.Json.Formatting.Indented));
            Task<UserSanctionModel> t1 = userSanctionService.UpdateUserSanction(uSan);
            await t1;
            if(t1.Status == TaskStatus.RanToCompletion)
            {
                Extensions.ShowAlert("Sanction successfully update.", Variant.Filled, Snackbar, Severity.Success);
                await GetUserSanctions();
            }
            IsLoading = !IsLoading;
            return new();
        }
        return new();
    
    }

    private async Task DepartmentChange(DepartmentModel m)
    {
        reload = false;
        StudentModel.Department = m;
        StateHasChanged();
        Task<List<DepartmentCourseModel>> list = departmentCourseService.ListOfDepartmentCourse(
            new FilterParameter{
                DepartmentId = m.DepartmentId
            });
        await list;
        if(list.Status == TaskStatus.RanToCompletion)
        {
            currentCourses = courses.Where( d => list.Result.Any( dc => dc.CourseId == d.CourseId)).ToList();
            reload = true;
            StateHasChanged();
        }
    }
    private async Task OpenQR()
    {
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
        var resultDialog = await dialogService.Show<Dialogs.QRCodeDialog>("", options).Result   ;
        if (!resultDialog.Canceled)
        {
            StudentModel.QRCode = (string) resultDialog.Data;
        }
    }
    private void UploadFiles2(IBrowserFile file)
    {
        files.Clear();
        files.Add(file);
    }
}
<style>
    .mud-dialog .mud-dialog-actions
    {
        position: absolute;
        bottom: 0;
        right: 0;
    }
    .mud-dialog
    {
        overflow: hidden;
    }
</style>